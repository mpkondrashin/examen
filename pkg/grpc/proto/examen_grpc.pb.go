// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: proto/examen.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExamenSvcClient is the client API for ExamenSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExamenSvcClient interface {
	Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitReply, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error)
}

type examenSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewExamenSvcClient(cc grpc.ClientConnInterface) ExamenSvcClient {
	return &examenSvcClient{cc}
}

func (c *examenSvcClient) Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitReply, error) {
	out := new(SubmitReply)
	err := c.cc.Invoke(ctx, "/examen.ExamenSvc/Submit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examenSvcClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/examen.ExamenSvc/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExamenSvcServer is the server API for ExamenSvc service.
// All implementations must embed UnimplementedExamenSvcServer
// for forward compatibility
type ExamenSvcServer interface {
	Submit(context.Context, *SubmitRequest) (*SubmitReply, error)
	Status(context.Context, *StatusRequest) (*StatusReply, error)
	mustEmbedUnimplementedExamenSvcServer()
}

// UnimplementedExamenSvcServer must be embedded to have forward compatible implementations.
type UnimplementedExamenSvcServer struct {
}

func (UnimplementedExamenSvcServer) Submit(context.Context, *SubmitRequest) (*SubmitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (UnimplementedExamenSvcServer) Status(context.Context, *StatusRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedExamenSvcServer) mustEmbedUnimplementedExamenSvcServer() {}

// UnsafeExamenSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExamenSvcServer will
// result in compilation errors.
type UnsafeExamenSvcServer interface {
	mustEmbedUnimplementedExamenSvcServer()
}

func RegisterExamenSvcServer(s grpc.ServiceRegistrar, srv ExamenSvcServer) {
	s.RegisterService(&ExamenSvc_ServiceDesc, srv)
}

func _ExamenSvc_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamenSvcServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examen.ExamenSvc/Submit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamenSvcServer).Submit(ctx, req.(*SubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamenSvc_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamenSvcServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examen.ExamenSvc/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamenSvcServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExamenSvc_ServiceDesc is the grpc.ServiceDesc for ExamenSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExamenSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "examen.ExamenSvc",
	HandlerType: (*ExamenSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Submit",
			Handler:    _ExamenSvc_Submit_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _ExamenSvc_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/examen.proto",
}
